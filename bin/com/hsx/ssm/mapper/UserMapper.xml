<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用->namespace等于mapper接口地址
-->
<mapper namespace="com.hsx.ssm.mapper.UserMapper">

	<!-- 开启本mapper的namespace下的二级缓存 
	type：指定cache接口的实现类类型，mybatis默认使用PerpetualCache
		如果要和ehcache整合，需要配置type为ehcache实现cache接口的类型 ->查看官方文档(注意是全限定名)
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
	

	<!-- 定义sql片段
	id: sql片段的唯一标识
	检验： 是基于单表来定义sql片段，这样这个sql片段可重用性才高
		在sql片段中不要包含where
	 -->
	<sql id="query_user_where">
		<if test="userCustom != null">
			<if test="userCustom.sex != null and userCustom.sex != ''">
				AND user.sex = #{userCustom.sex}
			</if>
			<if test="userCustom.username != null and userCustom.username != ''">
				AND user.username LIKE '%${userCustom.username}%'
			</if>
			<if test="ids != null">
				<!-- 使用foreach遍历传入ids 
				collection: 指定输入对象中集合属性
				item：每次遍历生成对象名
				open: 开始遍历时拼接串
				close: 结束遍历时拼接串
				separator： 遍历的两个对象中需要拼接的串
				-->
				<!-- AND (id = 27 OR id = 28 OR id = 29) -->
				<foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
					<!-- 每次遍历需要拼接的串 -->
					id = #{user_id}
				</foreach>
				
				<!-- AND id IN (27, 28, 29) -->
				<!-- 
				<foreach collection="ids" item="user_id" open="AND id IN (" close=")" separator=",">
					#{user_id}
				</foreach>
				 -->
			</if>
		</if>
	</sql>
	 
	 
	 

	<!-- 定义resultMap 
	将SELECT id id_, username username_ FROM USER WHERE id = #{id} 和User类中的属性做一个映射
	type： resultMap最终映射的Java对象类型，可以使用别名
	-->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果集中唯一标识
		column： 查询出来的列名
		property： type指定的POJO类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		-->
		<id column="id_" property="id"/>
		<!-- result表示查询结果集中普通映射的定义
		column： 查询出来的列名
		property： type指定的POJO类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系）
		 -->
		<result column="username_" property="username"/>
	</resultMap>
	


	<!-- 在映射文件中配置很多sql语句 -->

	<!-- 用户信息综合查询 
	#{userCustom.sex}： 取出POJO包装对象中性别值
	${userCustom.username}： 取出POJO包装对象中的用户名值
	-->
	<select id="findUserList" parameterType="userQueryVo" resultType="userCustom">
		SELECT * FROM USER 
		<!-- 
		where可以自动去掉条件中的第一个AND
		 -->
		<where>
			<!-- 引用sql片段的Id，如果refid指定的id不在本mapper文件中，需要在前面加上namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里可能还会引用其他的sql片段 -->
		</where>
	</select>
	
	<!-- 用户信息综合查询总数 -->
	<select id="findUserCount" parameterType="userQueryVo" resultType="int">
		SELECT COUNT(*) FROM USER 
		<!-- 
		where可以自动去掉条件中的第一个AND
		 -->
		<where>
			<!-- 引用sql片段的Id，如果refid指定的id不在本mapper文件中，需要在前面加上namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里可能还会引用其他的sql片段 -->
		</where>
	</select>
	
	<!-- 使用resultMap进行输出映射
	resultMap： 指定定义的resultMap的id，如果这个ResultMap在其他mapper.xml文件中，前边需要加namespace
	 -->
	<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id id_, username username_ FROM USER WHERE id = #{id}
	</select>

	<!-- 通过select执行数据库的查询
	id：标示映射文件中的sql，称为Statement的Id，将来这个sql语句会封装到mappedStatement对象中，所以讲id称为Statement的id
	parameterType：指定输入参数的类型，这是指定的是int型
	#{}：表示一个占位符
	#{id}：其中的id表示接受输入的参数，参数名就是id；如果输入的简单类型，#{}中的参数名可以任意，可以是value或者其他的名称
	resultType：输出结果的类型，指定sql输出结果的所映射的Java对象类型，这里select指定resultType表示将单条记录映射成的Java对象
	 -->
	<!-- <select id="findUserById" parameterType="int" resultType="user" > -->
	<!-- <select id="findUserById" parameterType="int" resultType="user" useCache="false"> -->
	<select id="findUserById" parameterType="int" resultType="user"> 
		SELECT * FROM USER WHERE id=#{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息,可能返回多条数据 
	resultType：指定的就是单条记录所映射的Java对象类型(不管是单条还是多条)
	${}：表示拼接sql串，将接受到参数的内容不加任何修饰拼接在sql中
	使用${}拼接sql，可能引起sql注入
	${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	-->
	<select id="findUserByUsername" parameterType="java.lang.String" resultType="user">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>
	
	<!-- 添加用户的statement 
	parameterType：指定输入的参数类型时pojo（包括用户信息）
	#{}中指定POJO的属性名，接受POJO对象的属性值，mybatis通过OGNL获取对象的属性值
	-->
	<insert id="insertUser" parameterType="user">
		<!-- 
		将插入数据的主键返回，返回到user对象中
		SELECT LAST_INSERT_ID() ：得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty ： 将查询到主键设置keyProperty指定的对象的哪个属性
		order ： SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		resultType : 指定SELECT LAST_INSERT_ID()的结果类型
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO USER (username, birthday, sex, address) VALUES (#{username}, #{birthday}, #{sex}, #{address})
	</insert>
	
	<!-- 删除用户
	 -->
	<delete id="deleteUserById" parameterType="java.lang.Integer">
		DELETE FROM USER WHERE id = #{id}
	</delete>
	
	<!-- 更新用户 (根据用户的ID更新用户)
	 分析：需要传入用户的id、需要传入的更新的信息
	parameterType: 传入用户对象的POJO -> 注意：用户的id必须存在
	#{id}:从接收的User对象中获取id属性值
	 -->
	<update id="updateUser" parameterType="user">
		UPDATE USER SET username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} WHERE id=#{id}
	</update>
	
</mapper>


